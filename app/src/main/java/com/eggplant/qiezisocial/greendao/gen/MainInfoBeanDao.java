package com.eggplant.qiezisocial.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.eggplant.qiezisocial.greendao.entry.ListConverter;
import java.util.List;

import com.eggplant.qiezisocial.greendao.entry.MainInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIN_INFO_BEAN".
*/
public class MainInfoBeanDao extends AbstractDao<MainInfoBean, Long> {

    public static final String TABLENAME = "MAIN_INFO_BEAN";

    /**
     * Properties of entity MainInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qsid = new Property(1, long.class, "qsid", false, "QSID");
        public final static Property Gsid = new Property(2, long.class, "gsid", false, "GSID");
        public final static Property Qsuid = new Property(3, int.class, "qsuid", false, "QSUID");
        public final static Property QsTxt = new Property(4, String.class, "qsTxt", false, "QS_TXT");
        public final static Property QsUserFace = new Property(5, String.class, "qsUserFace", false, "QS_USER_FACE");
        public final static Property QsNick = new Property(6, String.class, "qsNick", false, "QS_NICK");
        public final static Property QsType = new Property(7, String.class, "qsType", false, "QS_TYPE");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
        public final static Property Uid = new Property(9, long.class, "uid", false, "UID");
        public final static Property Created = new Property(10, long.class, "created", false, "CREATED");
        public final static Property Nick = new Property(11, String.class, "nick", false, "NICK");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property Sex = new Property(13, String.class, "sex", false, "SEX");
        public final static Property Birth = new Property(14, String.class, "birth", false, "BIRTH");
        public final static Property Careers = new Property(15, String.class, "careers", false, "CAREERS");
        public final static Property Face = new Property(16, String.class, "face", false, "FACE");
        public final static Property Card = new Property(17, String.class, "card", false, "CARD");
        public final static Property Edu = new Property(18, String.class, "edu", false, "EDU");
        public final static Property Xz = new Property(19, String.class, "xz", false, "XZ");
        public final static Property Topic = new Property(20, String.class, "topic", false, "TOPIC");
        public final static Property City = new Property(21, String.class, "city", false, "CITY");
        public final static Property Height = new Property(22, String.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(23, String.class, "weight", false, "WEIGHT");
        public final static Property Object = new Property(24, String.class, "object", false, "OBJECT");
        public final static Property Label = new Property(25, String.class, "label", false, "LABEL");
        public final static Property Pic = new Property(26, String.class, "pic", false, "PIC");
        public final static Property Account = new Property(27, String.class, "account", false, "ACCOUNT");
        public final static Property Type = new Property(28, String.class, "type", false, "TYPE");
        public final static Property Msg = new Property(29, String.class, "msg", false, "MSG");
        public final static Property Msg_user_nick = new Property(30, String.class, "msg_user_nick", false, "MSG_USER_NICK");
        public final static Property Msg_user_face = new Property(31, String.class, "msg_user_face", false, "MSG_USER_FACE");
        public final static Property Msg_user_id = new Property(32, long.class, "msg_user_id", false, "MSG_USER_ID");
        public final static Property MsgNum = new Property(33, int.class, "msgNum", false, "MSG_NUM");
        public final static Property NewMsgTime = new Property(34, long.class, "newMsgTime", false, "NEW_MSG_TIME");
        public final static Property MsgType = new Property(35, String.class, "msgType", false, "MSG_TYPE");
        public final static Property Source = new Property(36, String.class, "source", false, "SOURCE");
        public final static Property Online = new Property(37, String.class, "online", false, "ONLINE");
        public final static Property Mood = new Property(38, String.class, "mood", false, "MOOD");
        public final static Property Message = new Property(39, String.class, "message", false, "MESSAGE");
        public final static Property ExtractMark = new Property(40, boolean.class, "extractMark", false, "EXTRACT_MARK");
        public final static Property Media1 = new Property(41, String.class, "media1", false, "MEDIA1");
        public final static Property Media2 = new Property(42, String.class, "media2", false, "MEDIA2");
        public final static Property Media3 = new Property(43, String.class, "media3", false, "MEDIA3");
    }

    private final ListConverter picConverter = new ListConverter();

    public MainInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MainInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIN_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QSID\" INTEGER NOT NULL ," + // 1: qsid
                "\"GSID\" INTEGER NOT NULL ," + // 2: gsid
                "\"QSUID\" INTEGER NOT NULL ," + // 3: qsuid
                "\"QS_TXT\" TEXT," + // 4: qsTxt
                "\"QS_USER_FACE\" TEXT," + // 5: qsUserFace
                "\"QS_NICK\" TEXT," + // 6: qsNick
                "\"QS_TYPE\" TEXT," + // 7: qsType
                "\"USER_ID\" INTEGER NOT NULL ," + // 8: userId
                "\"UID\" INTEGER NOT NULL ," + // 9: uid
                "\"CREATED\" INTEGER NOT NULL ," + // 10: created
                "\"NICK\" TEXT," + // 11: nick
                "\"REMARK\" TEXT," + // 12: remark
                "\"SEX\" TEXT," + // 13: sex
                "\"BIRTH\" TEXT," + // 14: birth
                "\"CAREERS\" TEXT," + // 15: careers
                "\"FACE\" TEXT," + // 16: face
                "\"CARD\" TEXT," + // 17: card
                "\"EDU\" TEXT," + // 18: edu
                "\"XZ\" TEXT," + // 19: xz
                "\"TOPIC\" TEXT," + // 20: topic
                "\"CITY\" TEXT," + // 21: city
                "\"HEIGHT\" TEXT," + // 22: height
                "\"WEIGHT\" TEXT," + // 23: weight
                "\"OBJECT\" TEXT," + // 24: object
                "\"LABEL\" TEXT," + // 25: label
                "\"PIC\" TEXT," + // 26: pic
                "\"ACCOUNT\" TEXT," + // 27: account
                "\"TYPE\" TEXT," + // 28: type
                "\"MSG\" TEXT," + // 29: msg
                "\"MSG_USER_NICK\" TEXT," + // 30: msg_user_nick
                "\"MSG_USER_FACE\" TEXT," + // 31: msg_user_face
                "\"MSG_USER_ID\" INTEGER NOT NULL ," + // 32: msg_user_id
                "\"MSG_NUM\" INTEGER NOT NULL ," + // 33: msgNum
                "\"NEW_MSG_TIME\" INTEGER NOT NULL ," + // 34: newMsgTime
                "\"MSG_TYPE\" TEXT," + // 35: msgType
                "\"SOURCE\" TEXT," + // 36: source
                "\"ONLINE\" TEXT," + // 37: online
                "\"MOOD\" TEXT," + // 38: mood
                "\"MESSAGE\" TEXT," + // 39: message
                "\"EXTRACT_MARK\" INTEGER NOT NULL ," + // 40: extractMark
                "\"MEDIA1\" TEXT," + // 41: media1
                "\"MEDIA2\" TEXT," + // 42: media2
                "\"MEDIA3\" TEXT);"); // 43: media3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIN_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MainInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQsid());
        stmt.bindLong(3, entity.getGsid());
        stmt.bindLong(4, entity.getQsuid());
 
        String qsTxt = entity.getQsTxt();
        if (qsTxt != null) {
            stmt.bindString(5, qsTxt);
        }
 
        String qsUserFace = entity.getQsUserFace();
        if (qsUserFace != null) {
            stmt.bindString(6, qsUserFace);
        }
 
        String qsNick = entity.getQsNick();
        if (qsNick != null) {
            stmt.bindString(7, qsNick);
        }
 
        String qsType = entity.getQsType();
        if (qsType != null) {
            stmt.bindString(8, qsType);
        }
        stmt.bindLong(9, entity.getUserId());
        stmt.bindLong(10, entity.getUid());
        stmt.bindLong(11, entity.getCreated());
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(12, nick);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(15, birth);
        }
 
        String careers = entity.getCareers();
        if (careers != null) {
            stmt.bindString(16, careers);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(17, face);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(18, card);
        }
 
        String edu = entity.getEdu();
        if (edu != null) {
            stmt.bindString(19, edu);
        }
 
        String xz = entity.getXz();
        if (xz != null) {
            stmt.bindString(20, xz);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(21, topic);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(22, city);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(23, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(24, weight);
        }
 
        String object = entity.getObject();
        if (object != null) {
            stmt.bindString(25, object);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(26, label);
        }
 
        List pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(27, picConverter.convertToDatabaseValue(pic));
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(28, account);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(29, type);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(30, msg);
        }
 
        String msg_user_nick = entity.getMsg_user_nick();
        if (msg_user_nick != null) {
            stmt.bindString(31, msg_user_nick);
        }
 
        String msg_user_face = entity.getMsg_user_face();
        if (msg_user_face != null) {
            stmt.bindString(32, msg_user_face);
        }
        stmt.bindLong(33, entity.getMsg_user_id());
        stmt.bindLong(34, entity.getMsgNum());
        stmt.bindLong(35, entity.getNewMsgTime());
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(36, msgType);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(37, source);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(38, online);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(39, mood);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(40, message);
        }
        stmt.bindLong(41, entity.getExtractMark() ? 1L: 0L);
 
        String media1 = entity.getMedia1();
        if (media1 != null) {
            stmt.bindString(42, media1);
        }
 
        String media2 = entity.getMedia2();
        if (media2 != null) {
            stmt.bindString(43, media2);
        }
 
        String media3 = entity.getMedia3();
        if (media3 != null) {
            stmt.bindString(44, media3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MainInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQsid());
        stmt.bindLong(3, entity.getGsid());
        stmt.bindLong(4, entity.getQsuid());
 
        String qsTxt = entity.getQsTxt();
        if (qsTxt != null) {
            stmt.bindString(5, qsTxt);
        }
 
        String qsUserFace = entity.getQsUserFace();
        if (qsUserFace != null) {
            stmt.bindString(6, qsUserFace);
        }
 
        String qsNick = entity.getQsNick();
        if (qsNick != null) {
            stmt.bindString(7, qsNick);
        }
 
        String qsType = entity.getQsType();
        if (qsType != null) {
            stmt.bindString(8, qsType);
        }
        stmt.bindLong(9, entity.getUserId());
        stmt.bindLong(10, entity.getUid());
        stmt.bindLong(11, entity.getCreated());
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(12, nick);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(15, birth);
        }
 
        String careers = entity.getCareers();
        if (careers != null) {
            stmt.bindString(16, careers);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(17, face);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(18, card);
        }
 
        String edu = entity.getEdu();
        if (edu != null) {
            stmt.bindString(19, edu);
        }
 
        String xz = entity.getXz();
        if (xz != null) {
            stmt.bindString(20, xz);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(21, topic);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(22, city);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(23, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(24, weight);
        }
 
        String object = entity.getObject();
        if (object != null) {
            stmt.bindString(25, object);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(26, label);
        }
 
        List pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(27, picConverter.convertToDatabaseValue(pic));
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(28, account);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(29, type);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(30, msg);
        }
 
        String msg_user_nick = entity.getMsg_user_nick();
        if (msg_user_nick != null) {
            stmt.bindString(31, msg_user_nick);
        }
 
        String msg_user_face = entity.getMsg_user_face();
        if (msg_user_face != null) {
            stmt.bindString(32, msg_user_face);
        }
        stmt.bindLong(33, entity.getMsg_user_id());
        stmt.bindLong(34, entity.getMsgNum());
        stmt.bindLong(35, entity.getNewMsgTime());
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(36, msgType);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(37, source);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(38, online);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(39, mood);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(40, message);
        }
        stmt.bindLong(41, entity.getExtractMark() ? 1L: 0L);
 
        String media1 = entity.getMedia1();
        if (media1 != null) {
            stmt.bindString(42, media1);
        }
 
        String media2 = entity.getMedia2();
        if (media2 != null) {
            stmt.bindString(43, media2);
        }
 
        String media3 = entity.getMedia3();
        if (media3 != null) {
            stmt.bindString(44, media3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MainInfoBean readEntity(Cursor cursor, int offset) {
        MainInfoBean entity = new MainInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // qsid
            cursor.getLong(offset + 2), // gsid
            cursor.getInt(offset + 3), // qsuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // qsTxt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // qsUserFace
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qsNick
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qsType
            cursor.getLong(offset + 8), // userId
            cursor.getLong(offset + 9), // uid
            cursor.getLong(offset + 10), // created
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nick
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sex
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // birth
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // careers
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // face
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // card
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // edu
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // xz
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // topic
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // city
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // height
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // weight
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // object
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // label
            cursor.isNull(offset + 26) ? null : picConverter.convertToEntityProperty(cursor.getString(offset + 26)), // pic
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // account
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // type
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // msg
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // msg_user_nick
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // msg_user_face
            cursor.getLong(offset + 32), // msg_user_id
            cursor.getInt(offset + 33), // msgNum
            cursor.getLong(offset + 34), // newMsgTime
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // msgType
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // source
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // online
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // mood
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // message
            cursor.getShort(offset + 40) != 0, // extractMark
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // media1
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // media2
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // media3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MainInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQsid(cursor.getLong(offset + 1));
        entity.setGsid(cursor.getLong(offset + 2));
        entity.setQsuid(cursor.getInt(offset + 3));
        entity.setQsTxt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQsUserFace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQsNick(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQsType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.getLong(offset + 8));
        entity.setUid(cursor.getLong(offset + 9));
        entity.setCreated(cursor.getLong(offset + 10));
        entity.setNick(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSex(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBirth(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCareers(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFace(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCard(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEdu(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setXz(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTopic(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCity(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHeight(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWeight(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setObject(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLabel(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPic(cursor.isNull(offset + 26) ? null : picConverter.convertToEntityProperty(cursor.getString(offset + 26)));
        entity.setAccount(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setMsg(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMsg_user_nick(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMsg_user_face(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMsg_user_id(cursor.getLong(offset + 32));
        entity.setMsgNum(cursor.getInt(offset + 33));
        entity.setNewMsgTime(cursor.getLong(offset + 34));
        entity.setMsgType(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSource(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setOnline(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setMood(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setMessage(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setExtractMark(cursor.getShort(offset + 40) != 0);
        entity.setMedia1(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setMedia2(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setMedia3(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MainInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MainInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MainInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
